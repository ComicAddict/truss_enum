
generatorsOfAllSubgroups= [ [  ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ],
[ [ [ -1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ],
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 0, -1 ], [ 0, -1, 0 ], [ -1, 0, 0 ] ] ], 
[ [ [ 0, 0, 1 ], [ 0, -1, 0 ], [ 1, 0, 0 ] ] ],
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, 0, -1 ], [ 0, 1, 0 ], [ -1, 0, 0 ] ] ], 
[ [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ 0, 0, -1 ], [ -1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 0, 0, -1 ], [ 1, 0, 0 ], [ 0, -1, 0 ] ] ],
[ [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ -1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, -1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 0, 1 ], [ 0, -1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 0, -1 ], [ 0, -1, 0 ], [ 1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, -1 ], [ 0, 1, 0 ], [ -1, 0, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, -1 ], [ 0, 1, 0 ], [ -1, 0, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 0, -1 ], [ 0, -1, 0 ], [ -1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, -1 ], [ -1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, -1 ], [ 1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, -1 ], [ -1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, -1 ], [ 1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, -1 ], [ -1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, -1 ], [ 1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, -1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, 0, 1 ], [ 0, -1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, -1 ], [ 0, -1, 0 ], [ 1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, -1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, 0, 1 ], [ 0, -1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, -1 ], [ 0, -1, 0 ], [ 1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ], [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ -1, 0, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, -1 ], [ -1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, -1 ], [ 1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 0, 1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ] ]

generatorsOfSubgroupRepresentatives=[ 
[  ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ] ], 
[ [ [ 0, 1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, -1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, -1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ -1, 0, 0 ], [ 0, -1, 0 ] ] ], 
[ [ [ 0, -1, 0 ], [ -1, 0, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, -1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, -1, 0 ], [ 1, 0, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, -1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ] ], 
[ [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 0, 1, 0 ], [ -1, 0, 0 ], [ 0, 0, 1 ] ] ], 
[ [ [ -1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, -1 ] ], [ [ 0, 0, 1 ], [ 1, 0, 0 ], [ 0, 1, 0 ] ], [ [ 1, 0, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ] ],  [ [ 0, 1, 0 ], [ 1, 0, 0 ], [ 0, 0, 1 ] ] ] ]

#%%
import numpy as np
import sys
from itertools import combinations

# Define the basic rotation matrices
Rz90 = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])  # 90-degree rotation around z-axis
Ry90 = np.array([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])  # 90-degree rotation around y-axis
R_diag120 = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])  # 120-degree rotation around [1,1,1] axis

def generate_symmetries():
    symmetries = []
    for i in range(4):  # 4 rotations around z-axis
        for j in range(3):  # 3 rotations around y-axis
            for k in range(2):  # 2 rotations around diagonal
                symmetry = np.linalg.matrix_power(Rz90, i).dot(
                    np.linalg.matrix_power(Ry90, j)).dot(
                    np.linalg.matrix_power(R_diag120, k))
                symmetries.append(symmetry)
                symmetries.append(-symmetry)  # Include inversion
    return symmetries

    # Define the basic rotations
    # Rx90 = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]])
    # Ry90 = np.array([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
    # Rz90 = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
    # rotx = np.array([[1,0,0],[0,0,-1],[0,1,0]])
    # roty = np.array([[0,0,1],[0,1,0],[-1,0,0]])
    # rotz = np.array([[0,-1,0],[1,0,0],[0,0,1]])

    # # Generate all 48 symmetry operations
    # symmetries = []
    # for i in range(4):  # 4 rotations around x
    #     for j in range(4):  # 4 rotations around y
    #         for k in range(4):  # 4 rotations around z
    #             symmetry = np.linalg.matrix_power(Rx90, i).dot(
    #                 np.linalg.matrix_power(Ry90, j)).dot(
    #                 np.linalg.matrix_power(Rz90, k))
    #             symmetries.append(symmetry)
    #             symmetries.append(-symmetry)  # Include inversion

    return symmetries


symmetries = generate_symmetries()
#%%
# Define the vertices of a rhombic dodecahedron
vertices = np.array([
    [2, 2, 2], 
    [-2, 2, 2], 
    [2, -2, 2], 
    [2, 2, -2],
    [-2, -2, 2], 
    [-2, 2, -2], 
    [2, -2, -2], 
    [-2, -2, -2],
    [4, 0, 0], 
    [-4, 0, 0], 
    [0, 4, 0], 
    [0, -4, 0], 
    [0, 0, 4], 
    [0, 0, -4]
])

edges = np.array([
    [1,1,3],
    [-1,1,3],
    [1,-1,3],
    [-1,-1,3],
    [1,1,-3],
    [-1,1,-3],
    [1,-1,-3],
    [-1,-1,-3],
    [1,3,1],
    [-1,3,1],
    [1,3,-1],
    [-1,3,-1],
    [1,-3,1],
    [-1,-3,1],
    [1,-3,-1],
    [-1,-3,-1],
    [3,1,1],
    [3,-1,1],
    [3,1,-1],
    [3,-1,-1],
    [-3,1,1],
    [-3,-1,1],
    [-3,1,-1],
    [-3,-1,-1],
])

faces = np.array([
    [0,2,2],
    [0,-2,2],
    [0,2,-2],
    [0,-2,-2],
    [2,0,2],
    [2,0,-2],    
    [-2,0,-2],
    [-2,0,2],
    [2,2,0],
    [2,-2,0],
    [-2,2,0],
    [-2,-2,0],
])

dodeca = np.vstack((faces, vertices, edges))

test = np.vstack((faces, vertices))

vert_len = test.shape[0]
mask = np.zeros(vert_len,dtype=bool)

#%%
def encode(trusses):
    enc = ['0'] * vert_len
    for t in trusses:
        i_f = np.where((test == t).all(1))[0]
        if (i_f.shape[0] != 0):
            enc[i_f[0]] = '1'
    return int("".join(enc),2)

def decode(e):
    mask = np.zeros(vert_len, dtype=bool)
    nummask = [bit == '1' for bit in bin(e)[2:]]
    mask[vert_len-len(nummask):] = nummask
    return test[mask]
#%%
# complete = set(range(2**vert_len))
truss_elem_num = int(sys.argv[1])
complete = set((2**np.array(list(combinations(range(vert_len), truss_elem_num)), dtype=object)).sum(1))

type_classes = []
while complete:
    e = complete.pop()
    tr = decode(e)
    tmp = set()
    tmp.add(e)
    # print(e)
    if e == 0:
        complete -= tmp
        type_classes.append(tmp)
        continue
    for s in symmetries:
        # print(encode(np.dot(tr, s.T)))
        tmp.add(encode(np.dot(tr, s.T)))

    complete -= tmp
    type_classes.append(tmp)

# print(type_classes)
print(len(type_classes), " number of distinct configurations for ", truss_elem_num, " number of truss elements")


# %%
